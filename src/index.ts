import { green, red, yellow } from 'ansi-colors'
import * as dotenv from 'dotenv'
import { Interface } from 'ethers'

import { patchBigint } from './bigint/patch-bigint'
import { getAbi, initChains } from './chains'
import { CallDataInformation } from './parser'
import { parseCallData } from './parser/calldata-parsers/parse-call-data'
import { bridge, bridgeSwap, feeBridge, stargateSwap, swap, swapBridge } from './testdata/encoded'
import { ContractLocation } from './abi-cache/abi-cache'
import { cache, initCache } from './abi-cache/cache'

patchBigint()

dotenv.config()

initCache()

export const cacheAbi = (address: string): Promise<void[]> => {
    const chains = initChains()

    return Promise.all(
        chains.map(async (chain) => {
            const location = { address, chain: chain.chain } as ContractLocation

            if (!cache.has(location)) {
                const abi = await getAbi(chain, address)

                if (abi) {
                    cache.set(location, new Interface(abi))
                }
            }

            return Promise.resolve()
        })
    )
}

const cacheCandidates = (c: CallDataInformation) =>
    // eslint-disable-next-line no-underscore-dangle
    [...(c.functionParameters._swapData || []), c.functionParameters._amarokData, c.functionParameters._stargateData]
        .filter((d) => d !== undefined && d.callTo !== undefined)
        .map((d) => cacheAbi(d?.callTo as string))

const lu =
    '0x41706c4e0000000000000000000000000000000000000000000000000000000000000060674cfc817b217992a45963c0a9c01e7782bc876bdfae01a5e1ccf3dd0a1b709200000000000000000000000000000000000000000000000000000000000005a000000000000000000000000094d44190b9c9ff3bff6c69a75a38416a055d5f94000000000000000000000000214d52880b1e4e17d020908cd8eaa988ffdd40200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001890c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000064407417000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003e425839ca7ee979478ae93d7b7e7a6d329c095156b78dd95bd20fa09b9aae78047ace357980000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000020000000000000000000000000094d44190b9c9ff3bff6c69a75a38416a055d5f9400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0c8e98b6b6b227fe7e85b88a050039d33cb642ed18eef955eab2c436f01a40fc500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf3695683000000000000000000000000000000000000000000000000000000000000000e9434441a3ff1b68f0f370e56cf5eab44fa665f56b6c0f39d5c785406c304fcaef27710fad46c64a8edefeb2961edd8a4858daa9613592c17ca831c3b50f54bbbee5e777211e68061c8e1c25d47c375df711c0a5a3644166218055d9d247f5de37568aa4c66bda27066b18845662f30274ebf485a6d5d4ba738a8f7a81c731f87e01dc3abbf235201ba1677a9e0fab14824f91234b48827fc057f432b3e020d265e663366b049e7a524f524a63e515de7c4d7a2e29a3218db477e8fffb1a5e61741567492f87703fe41e7aaf58f4e0420ac8f351f4df603bacf589c4ba3c88087ed3eddbfb744250bf86a04dd81ef6736028a470049371e7dc762cf5f073a72a742ac048dbce9ef9e77027d5220a68df68143610d03eb2feaaa7832b8c29e6cc070a6212eb8e544609b04281d090afeb46ffecb6bbc6ff86907e793aa55b39ff71ae7e24f3e6440411653f4c7d6d3ac0bc7406edc3e7c845a5b620c92965c11008b5dcfce8e61e49dfcd577e3ffe005e15e19eb59be09347a05fc327b7b75c5972cebab1e7ec49fe17683fa7611ba2cf0d2d07ecde13a836ed48371841cadedfa889b308d604d8b24f432ea51baec58a01476d18ab886f1fa7712c5470712a88c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041e3ba353e3936fc5d2e911329e9dbcc81d92bd1fd41232b8cb98cc887152e6ee11d211aaff15d213b2582e8e83daf92d5f4ba9e269924133271d34dcea33996821b00000000000000000000000000000000000000000000000000000000000000'

const run = async () => {
    const callDataStrings =
        process.argv.length === 2
            // ? [swap, bridge, stargateSwap, bridgeSwap, swapBridge, feeBridge]
            ? [lu]
            : process.argv.slice(2)

    await cacheAbi('0x214d52880b1e4E17d020908cd8EAa988FfDD4020')

    const parsed = await Promise.all(
        callDataStrings
            .map(async (callDataString) => {
                const parsedCandidates: CallDataInformation[] = parseCallData(callDataString)

                const resultString = `parsed ${parsedCandidates.length} matching function call(s):`

                console.log(parsedCandidates.length > 0 ? green(resultString) : yellow(resultString))

                await Promise.all(parsedCandidates.map(cacheCandidates).flat())

                return parseCallData(callDataString)
            })
            .flat()
    )

    for (const candidate of parsed) {
        console.log(JSON.stringify(candidate, undefined, 4))
    }
}

run()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(red(error))
        process.exit(1)
    })
